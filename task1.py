# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1is3A0bmcWJtpjYo3onUCQHxUNYz9XVz_
"""

# Iris Species Classification using Scikit-learn

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer

# Load the Iris dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target)

# For this example, let's simulate a few missing values
X.iloc[0, 0] = np.nan
X.iloc[5, 2] = np.nan

# Step 1: Preprocessing

## 1.1 Handle missing values using mean imputation
imputer = SimpleImputer(strategy='mean')
X_imputed = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)

## 1.2 Encode the labels (not necessary here, but showing in case labels are strings)
# For example: y = pd.Series(["setosa", "versicolor", "virginica", ...])
# label_encoder = LabelEncoder()
# y_encoded = label_encoder.fit_transform(y)

# In our case, y is already numerical so we use it directly

# Step 2: Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)

# Step 3: Train the Decision Tree classifier
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 4: Make predictions
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='macro')  # macro for multiclass
recall = recall_score(y_test, y_pred, average='macro')

# Display the results
print("Model Evaluation Metrics:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")